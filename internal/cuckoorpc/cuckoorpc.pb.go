// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: cuckoorpc.proto

package cuckoorpc

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type NullMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NullMessage) Reset() {
	*x = NullMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cuckoorpc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NullMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NullMessage) ProtoMessage() {}

func (x *NullMessage) ProtoReflect() protoreflect.Message {
	mi := &file_cuckoorpc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NullMessage.ProtoReflect.Descriptor instead.
func (*NullMessage) Descriptor() ([]byte, []int) {
	return file_cuckoorpc_proto_rawDescGZIP(), []int{0}
}

type RequestData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RequestData) Reset() {
	*x = RequestData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cuckoorpc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestData) ProtoMessage() {}

func (x *RequestData) ProtoReflect() protoreflect.Message {
	mi := &file_cuckoorpc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestData.ProtoReflect.Descriptor instead.
func (*RequestData) Descriptor() ([]byte, []int) {
	return file_cuckoorpc_proto_rawDescGZIP(), []int{1}
}

func (x *RequestData) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type ReplyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data bool `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReplyData) Reset() {
	*x = ReplyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cuckoorpc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyData) ProtoMessage() {}

func (x *ReplyData) ProtoReflect() protoreflect.Message {
	mi := &file_cuckoorpc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyData.ProtoReflect.Descriptor instead.
func (*ReplyData) Descriptor() ([]byte, []int) {
	return file_cuckoorpc_proto_rawDescGZIP(), []int{2}
}

func (x *ReplyData) GetData() bool {
	if x != nil {
		return x.Data
	}
	return false
}

type ReplyUint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data uint64 `protobuf:"varint,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *ReplyUint) Reset() {
	*x = ReplyUint{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cuckoorpc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReplyUint) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplyUint) ProtoMessage() {}

func (x *ReplyUint) ProtoReflect() protoreflect.Message {
	mi := &file_cuckoorpc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplyUint.ProtoReflect.Descriptor instead.
func (*ReplyUint) Descriptor() ([]byte, []int) {
	return file_cuckoorpc_proto_rawDescGZIP(), []int{3}
}

func (x *ReplyUint) GetData() uint64 {
	if x != nil {
		return x.Data
	}
	return 0
}

var File_cuckoorpc_proto protoreflect.FileDescriptor

var file_cuckoorpc_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x75, 0x63, 0x6b, 0x6f, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x09, 0x63, 0x75, 0x63, 0x6b, 0x6f, 0x6f, 0x72, 0x70, 0x63, 0x22, 0x0d, 0x0a, 0x0b,
	0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x21, 0x0a, 0x0b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x1f,
	0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x1f, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x55, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x32, 0xb4, 0x02, 0x0a, 0x10, 0x43, 0x75, 0x63, 0x6b, 0x6f, 0x6f, 0x52, 0x70, 0x63, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x12,
	0x16, 0x2e, 0x63, 0x75, 0x63, 0x6b, 0x6f, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x14, 0x2e, 0x63, 0x75, 0x63, 0x6b, 0x6f, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12,
	0x38, 0x0a, 0x06, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x63, 0x6b,
	0x6f, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x14, 0x2e, 0x63, 0x75, 0x63, 0x6b, 0x6f, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x44, 0x61, 0x74, 0x61, 0x22, 0x00, 0x12, 0x38, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x63, 0x6b, 0x6f, 0x6f, 0x72, 0x70, 0x63, 0x2e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x14, 0x2e, 0x63, 0x75,
	0x63, 0x6b, 0x6f, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x05, 0x52, 0x65, 0x73, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x63,
	0x75, 0x63, 0x6b, 0x6f, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x63, 0x75, 0x63, 0x6b, 0x6f, 0x6f, 0x72, 0x70, 0x63,
	0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x37,
	0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x2e, 0x63, 0x75, 0x63, 0x6b, 0x6f, 0x6f,
	0x72, 0x70, 0x63, 0x2e, 0x4e, 0x75, 0x6c, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a,
	0x14, 0x2e, 0x63, 0x75, 0x63, 0x6b, 0x6f, 0x6f, 0x72, 0x70, 0x63, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x55, 0x69, 0x6e, 0x74, 0x22, 0x00, 0x42, 0x0d, 0x5a, 0x0b, 0x2e, 0x3b, 0x63, 0x75, 0x63,
	0x6b, 0x6f, 0x6f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cuckoorpc_proto_rawDescOnce sync.Once
	file_cuckoorpc_proto_rawDescData = file_cuckoorpc_proto_rawDesc
)

func file_cuckoorpc_proto_rawDescGZIP() []byte {
	file_cuckoorpc_proto_rawDescOnce.Do(func() {
		file_cuckoorpc_proto_rawDescData = protoimpl.X.CompressGZIP(file_cuckoorpc_proto_rawDescData)
	})
	return file_cuckoorpc_proto_rawDescData
}

var file_cuckoorpc_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_cuckoorpc_proto_goTypes = []interface{}{
	(*NullMessage)(nil), // 0: cuckoorpc.NullMessage
	(*RequestData)(nil), // 1: cuckoorpc.RequestData
	(*ReplyData)(nil),   // 2: cuckoorpc.ReplyData
	(*ReplyUint)(nil),   // 3: cuckoorpc.ReplyUint
}
var file_cuckoorpc_proto_depIdxs = []int32{
	1, // 0: cuckoorpc.CuckooRpcService.Lookup:input_type -> cuckoorpc.RequestData
	1, // 1: cuckoorpc.CuckooRpcService.Insert:input_type -> cuckoorpc.RequestData
	1, // 2: cuckoorpc.CuckooRpcService.Delete:input_type -> cuckoorpc.RequestData
	0, // 3: cuckoorpc.CuckooRpcService.Reset:input_type -> cuckoorpc.NullMessage
	0, // 4: cuckoorpc.CuckooRpcService.Count:input_type -> cuckoorpc.NullMessage
	2, // 5: cuckoorpc.CuckooRpcService.Lookup:output_type -> cuckoorpc.ReplyData
	2, // 6: cuckoorpc.CuckooRpcService.Insert:output_type -> cuckoorpc.ReplyData
	2, // 7: cuckoorpc.CuckooRpcService.Delete:output_type -> cuckoorpc.ReplyData
	0, // 8: cuckoorpc.CuckooRpcService.Reset:output_type -> cuckoorpc.NullMessage
	3, // 9: cuckoorpc.CuckooRpcService.Count:output_type -> cuckoorpc.ReplyUint
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_cuckoorpc_proto_init() }
func file_cuckoorpc_proto_init() {
	if File_cuckoorpc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cuckoorpc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NullMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cuckoorpc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cuckoorpc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cuckoorpc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReplyUint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cuckoorpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cuckoorpc_proto_goTypes,
		DependencyIndexes: file_cuckoorpc_proto_depIdxs,
		MessageInfos:      file_cuckoorpc_proto_msgTypes,
	}.Build()
	File_cuckoorpc_proto = out.File
	file_cuckoorpc_proto_rawDesc = nil
	file_cuckoorpc_proto_goTypes = nil
	file_cuckoorpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CuckooRpcServiceClient is the client API for CuckooRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CuckooRpcServiceClient interface {
	Lookup(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ReplyData, error)
	Insert(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ReplyData, error)
	Delete(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ReplyData, error)
	Reset(ctx context.Context, in *NullMessage, opts ...grpc.CallOption) (*NullMessage, error)
	Count(ctx context.Context, in *NullMessage, opts ...grpc.CallOption) (*ReplyUint, error)
}

type cuckooRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCuckooRpcServiceClient(cc grpc.ClientConnInterface) CuckooRpcServiceClient {
	return &cuckooRpcServiceClient{cc}
}

func (c *cuckooRpcServiceClient) Lookup(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/cuckoorpc.CuckooRpcService/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooRpcServiceClient) Insert(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/cuckoorpc.CuckooRpcService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooRpcServiceClient) Delete(ctx context.Context, in *RequestData, opts ...grpc.CallOption) (*ReplyData, error) {
	out := new(ReplyData)
	err := c.cc.Invoke(ctx, "/cuckoorpc.CuckooRpcService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooRpcServiceClient) Reset(ctx context.Context, in *NullMessage, opts ...grpc.CallOption) (*NullMessage, error) {
	out := new(NullMessage)
	err := c.cc.Invoke(ctx, "/cuckoorpc.CuckooRpcService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cuckooRpcServiceClient) Count(ctx context.Context, in *NullMessage, opts ...grpc.CallOption) (*ReplyUint, error) {
	out := new(ReplyUint)
	err := c.cc.Invoke(ctx, "/cuckoorpc.CuckooRpcService/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CuckooRpcServiceServer is the server API for CuckooRpcService service.
type CuckooRpcServiceServer interface {
	Lookup(context.Context, *RequestData) (*ReplyData, error)
	Insert(context.Context, *RequestData) (*ReplyData, error)
	Delete(context.Context, *RequestData) (*ReplyData, error)
	Reset(context.Context, *NullMessage) (*NullMessage, error)
	Count(context.Context, *NullMessage) (*ReplyUint, error)
}

// UnimplementedCuckooRpcServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCuckooRpcServiceServer struct {
}

func (*UnimplementedCuckooRpcServiceServer) Lookup(context.Context, *RequestData) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (*UnimplementedCuckooRpcServiceServer) Insert(context.Context, *RequestData) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedCuckooRpcServiceServer) Delete(context.Context, *RequestData) (*ReplyData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedCuckooRpcServiceServer) Reset(context.Context, *NullMessage) (*NullMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (*UnimplementedCuckooRpcServiceServer) Count(context.Context, *NullMessage) (*ReplyUint, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}

func RegisterCuckooRpcServiceServer(s *grpc.Server, srv CuckooRpcServiceServer) {
	s.RegisterService(&_CuckooRpcService_serviceDesc, srv)
}

func _CuckooRpcService_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooRpcServiceServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoorpc.CuckooRpcService/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooRpcServiceServer).Lookup(ctx, req.(*RequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooRpcService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooRpcServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoorpc.CuckooRpcService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooRpcServiceServer).Insert(ctx, req.(*RequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooRpcService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooRpcServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoorpc.CuckooRpcService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooRpcServiceServer).Delete(ctx, req.(*RequestData))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooRpcService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooRpcServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoorpc.CuckooRpcService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooRpcServiceServer).Reset(ctx, req.(*NullMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _CuckooRpcService_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NullMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CuckooRpcServiceServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cuckoorpc.CuckooRpcService/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CuckooRpcServiceServer).Count(ctx, req.(*NullMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _CuckooRpcService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cuckoorpc.CuckooRpcService",
	HandlerType: (*CuckooRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _CuckooRpcService_Lookup_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _CuckooRpcService_Insert_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CuckooRpcService_Delete_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _CuckooRpcService_Reset_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _CuckooRpcService_Count_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cuckoorpc.proto",
}
